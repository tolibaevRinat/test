@use 'sass:math';

@function adaptiveSize(
	$max: 48,
	$min: 16,
	$maxViewportWidth: 1920.98,
	$minViewportWidth: 390.98
) {
	$maxSize: math.div($max, 16);
	$minSize: math.div($min, 16);
	$maxWidth: math.div($maxViewportWidth, 16);
	$minWidth: math.div($minViewportWidth, 16);

	$slope: math.div(($maxSize - $minSize), ($maxWidth - $minWidth));
	$yAxisIntersection: -$minWidth * $slope + $minSize;

	@return clamp(
		#{$minSize * 1rem},
		#{$yAxisIntersection * 1rem} + #{$slope * 100vw},
		#{$maxSize * 1rem}
	);
}

@function rem($pixel) {
	@if math.is-unitless($pixel) {
		@return math.div($pixel, 16) + rem;
	} @else {
		@error 'Ошибка в функций rem';
	}
}

@mixin flex-center($isInline: false) {
	@if $isInline {
		display: inline-flex;
	} @else {
		display: flex;
	}

	justify-content: center;
	align-items: center;
}

@mixin abs-center {
	position: absolute;
	top: 50%;
	left: 50%;
	translate: -50% -50%;
}

@mixin visually-hidden {
	position: absolute !important;
	width: 1px !important;
	height: 1px !important;
	margin: -1px !important;
	border: 0 !important;
	padding: 0 !important;
	white-space: nowrap !important;
	clip-path: inset(100%) !important;
	clip: rect(0 0 0 0) !important;
	overflow: hidden !important;
}

@mixin square($size) {
	@if math.is-unitless($size) {
		width: rem($size);
		height: rem($size);
	} @else {
		@error 'Ошибка в функций square';
	}
}
